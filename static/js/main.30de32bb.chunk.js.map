{"version":3,"sources":["components/Switch.js","components/Popup.js","components/Shade.js","components/Shades.js","App.js","serviceWorker.js","index.js"],"names":["Switch","react_default","a","createElement","className","type","onClick","this","props","toggle","React","Component","Float","styled","div","_templateObject","Popup","hex","Box","Shade_templateObject","bg","Shade","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","copyToClipboard","e","el","document","rgb","convertToRGB","value","copyHex","rgb2hex","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","setState","showPopup","setTimeout","_rgb$slice$split$map","slice","split","map","i","parseInt","toString","padStart","_rgb$slice$split$map2","slicedToArray","r","g","b","concat","layer","source","convertToRGBAObj","rgba","console","log","Math","round","_rgba$slice$split","_rgba$slice$split2","state","bind","assertThisInitialized","components_Popup","Container","Shades_templateObject","Shades","components_Shade","Wrapper","section","App_templateObject","Input","input","_templateObject2","darkMode","HexInput","RGBAInput","Button","button","_templateObject3","App","handleButtonClick","prevState","showShades","handleHexChange","checkValidHex","target","hex2rgba","checkDarkMode","test","_hex$match","match","_hex$match2","rr","gg","bb","aa","alpha","toFixed","handleRGBAChange","checkValidRGBA","rgba2hex","_rgba$slice$split3","_rgba$slice$split4","inRange","n","upperLimit","_rgba$slice$split5","_rgba$slice$split6","parseFloat","_rgba$slice$split$map","_rgba$slice$split$map2","_rgba$slice$split7","_rgba$slice$split8","toggleCopyMode","isHexCopied","src_components_Switch","components_Shades","onChange","maxLength","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30de32bb.chunk.js","sourcesContent":["import React from 'react';\n// import styled from 'styled-components';\nimport './Switch.css';\n\nclass Switch extends React.Component {\n\n  render() {\n    return (\n      <label className=\"switch\">\n        <input type=\"checkbox\" onClick={this.props.toggle}/>\n        <span className=\"slider round\"></span>\n      </label>\n    )\n  }\n    \n}\n\nexport default Switch;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Float = styled.div`\n  background: #ffffff55;\n  padding: 0 5px;\n  border-radius: 5px;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  height: 100%;\n`;\n\nconst Popup = (props) => {\n  return (\n    <Float>\n      Copied {props.hex ? \"Hex Code\" : \"RGB Code\" }!\n    </Float>\n  )\n}\n\nexport default Popup;","import React from 'react';\nimport styled from 'styled-components';\nimport Popup from './Popup';\n\nconst Box = styled.div`\n  background: ${props => props.bg};\n  width: 100%;\n  height: 20%;\n\tz-index: 999;\n\tdisplay: flex;\n`;\n\nclass Shade extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tshowPopup: false\n\t\t}\n\t\tthis.copyToClipboard = this.copyToClipboard.bind(this)\n\t}\n\t\n\tcopyToClipboard = (e) => {\n\t\tconst el = document.createElement('textarea');\n\t\tconst rgb = this.convertToRGB(this.props.bg)\n\t\tel.value = this.props.copyHex ? this.rgb2hex(rgb) : rgb;\n\t\tel.setAttribute('readonly', '');\n\t\tel.style = {position: 'absolute', left: '-9999px'};\n\t\tdocument.body.appendChild(el);\n\t\tel.select();\n\t\tdocument.execCommand('copy');\n\t\tdocument.body.removeChild(el);\n\t\tthis.setState({ showPopup: true })\n\t\tsetTimeout(() => {this.setState({showPopup:false})}, 1000); \n\t}\n\n\trgb2hex = (rgb) => {\n\t\tconst [r, g, b] = rgb.slice(4,-1).split(',')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map(i => parseInt(i).toString(16).padStart(2, '0'))\n\t\treturn `#${r}${g}${b}`                      \n\t}\n\t\n\tconvertToRGB = (layer) => {\n\t\tconst source = this.convertToRGBAObj(layer)\n\t\tconst bg = this.convertToRGBAObj(this.props.rgba)\n\t\tconsole.log('source', source)\n\t\tconsole.log('bg', bg)\n\t\tconst r = Math.round(((1-source.a) * bg.r) + (source.a * source.r))\n\t\tconst g = Math.round(((1-source.a) * bg.g) + (source.a * source.g))\n\t\tconst b = Math.round(((1-source.a) * bg.b) + (source.a * source.b))\n\t\treturn `rgb(${r}, ${g}, ${b})`\n\t}\n\t\n\tconvertToRGBAObj = (rgba) => {\n\t\tconst [r, g, b, a] = rgba.slice(5,-1).split(',')\n\t\treturn {r:r, g:g, b:b, a:a}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Box bg={this.props.bg} onClick={this.copyToClipboard}>\n\t\t\t\t{this.state.showPopup ? (\n\t\t\t\t\t<Popup hex={this.props.copyHex} />\n\t\t\t\t ) : null }\n\t\t\t</Box>  \t\t\t  \n\t\t)\n\t}\n}\n  \nexport default Shade;","import React from 'react';\nimport styled from 'styled-components';\nimport Shade from './Shade';\n\nconst Container = styled.div`\n  background-color: transparent;\n  height: 100vh;\n  width: 10%;\n  position: absolute;\n  left: ${props => props.left}\n  top: 0;\n`;\n\nconst Shades = (props) => {\n  return (\n    <div>\n      <Container left={0}>\n        <Shade bg={'rgba(255,255,255,0.1)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(255,255,255,0.2)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(255,255,255,0.3)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(255,255,255,0.4)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(255,255,255,0.5)'} rgba={props.rgba} copyHex={props.copyHex} />\n      </Container>\n      <Container left={'90%'}>\n        <Shade bg={'rgba(0,0,0,0.1)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(0,0,0,0.2)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(0,0,0,0.3)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(0,0,0,0.4)'} rgba={props.rgba} copyHex={props.copyHex} />\n        <Shade bg={'rgba(0,0,0,0.5)'} rgba={props.rgba} copyHex={props.copyHex} />\n      </Container>\n    </div>\n  )\n}\n\nexport default Shades;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Switch from './components/Switch';\nimport Shades from './components/Shades';\n\nconst Wrapper = styled.section`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  // padding: 4em;\n  background: ${props => props.bg}\n`;\n\nconst Input = styled.input`\n  background-color: transparent;\n  color: ${props => props.darkMode ? \"white\" : \"black\"};\n  border-style: none;\n  border-bottom: ${props => props.darkMode ? \"white\" : \"black\"} solid 1px;\n  font-size: 20px;\n  text-align: center;\n  padding: 5px 20px;\n  margin: 10px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst HexInput = Input \nconst RGBAInput = Input\n\nconst Button = styled.button`\n  font-size: large;\n  background: transparent;\n  color: ${props => props.darkMode ? \"white\" : \"black\"};\n  padding: 10px;\n  border: 1px solid ${props => props.darkMode ? \"white\" : \"black\"};\n  border-radius: 5px;\n  position: absolute;\n  top: 5%;\n  &:hover {\n    background: ${props => props.darkMode ? \"white\" : \"black\"};\n    color: ${props => props.darkMode ? \"black\" : \"white\"};\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hex: '#ff00ffff',\n      rgba: 'rgba(255,0,255,1.0)',\n      bg: '#ff00ffff',\n      showShades: true,\n      darkMode: false,\n      isHexCopied: true\n    }\n    this.handleButtonClick = this.handleButtonClick.bind(this)\n    this.handleHexChange = this.handleHexChange.bind(this)\n    this.handleRGBAChange = this.handleRGBAChange.bind(this)\n    \n  }\n\n  handleButtonClick = (e) => {\n    this.setState(prevState => ({\n      showShades: !prevState.showShades\n    }))\n  }\n\n  handleHexChange = (e) => {\n    if (this.checkValidHex(e.target.value)) {\n      const rgba = this.hex2rgba(e.target.value)\n      this.setState({\n        bg: e.target.value,\n        rgba: rgba,\n        darkMode: this.checkDarkMode(rgba)\n      })\n    }     \n    this.setState({ hex: e.target.value })\n  }\n\n  checkValidHex = (hex) => {\n    const regex = /^#[a-fA-F0-9]{6}$/\n    const regex2 = /^#[a-fA-F0-9]{8}$/\n    return regex.test(hex) || regex2.test(hex)\n  }\n\n  hex2rgba = (hex) => {\n    const [rr, gg, bb, aa] = hex.match(/\\w\\w/g)\n    const r = parseInt(rr, 16)\n    const g = parseInt(gg, 16)\n    const b = parseInt(bb, 16)\n    const alpha = aa ? (parseInt(aa, 16) / 255).toFixed(2) : 1.0\n    return `rgba(${r},${g},${b},${alpha})`\n  }\n\n  handleRGBAChange = (e) => {\n    console.log(e.target.value)\n    console.log(this.checkValidRGBA(e.target.value))\n    if (this.checkValidRGBA(e.target.value)) {\n      this.setState({\n        bg: e.target.value,\n        hex: this.rgba2hex(e.target.value),\n        darkMode: this.checkDarkMode(e.target.value)\n      })\n    }\n    this.setState({ rgba: e.target.value })\n  }\n\n  checkValidRGBA = (rgba) => {\n    let r = 0; \n    let g = 0; \n    let b = 0;\n    let a = 0;\n    if (rgba.slice(0,4) === \"rgba\") {\n      const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    } else {\n      const [r, g, b] = rgba.slice(4,-1).split(',')\n      a = 1\n    }\n    return (\n      this.inRange(r, 255) && \n      this.inRange(g, 255) && \n      this.inRange(b, 255) &&\n      this.inRange(a, 1)\n    )\n  }\n\n  inRange = (n, upperLimit) => {\n    return parseInt(n) >= 0 && parseInt(n) <= upperLimit\n  }\n\n  rgba2hex = (rgba) => {\n    if (rgba.slice(0,4) === \"rgba\") {\n      const [r, g, b, a] = rgba.slice(5,-1).split(',')\n      const rr = parseInt(r).toString(16).padStart(2, '0')\n      const gg = parseInt(g).toString(16).padStart(2, '0')\n      const bb = parseInt(b).toString(16).padStart(2, '0')\n      const aa = Math.round((parseFloat(a) * 255)).toString(16).padStart(2, '0')\n      return `#${rr}${gg}${bb}${aa}`\n    } else {\n        const [r, g, b] = rgba.slice(4,-1).split(',')\n                              .map(i => parseInt(i).toString(16).padStart(2, '0'))\n        return `#${r}${g}${b}`                      \n    }\n  }\n\n  checkDarkMode = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    const val = parseInt(r) * 299 + parseInt(g) * 587 + parseInt(b) * 114 / 1000\n    return val < 123 ? true : false\n  }\n\n  toggleCopyMode = (e) => {\n    this.setState(prevState => ({\n      isHexCopied: !prevState.isHexCopied\n    }), ()=>{console.log(this.state.isHexCopied)})\n    \n  }\n\n  render() {\n    return (\n      <Wrapper bg={this.state.bg}>\n        <Button\n          onClick={this.handleButtonClick}\n          darkMode={this.state.darkMode}\n        >Show Shades</Button>\n\n        <Switch toggle={this.toggleCopyMode}></Switch>\n\n        { this.state.showShades ? (\n          <Shades rgba={this.state.rgba} copyHex={this.state.isHexCopied}/>\n        ) : (<div></div>)}\n\n        <HexInput \n          type=\"text\" \n          onChange={this.handleHexChange}\n          value={this.state.hex}\n          maxLength={9}\n          darkMode={this.state.darkMode}\n        />\n        <RGBAInput \n          type=\"text\"\n          onChange={this.handleRGBAChange}\n          value={this.state.rgba}\n          darkMode={this.state.darkMode}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}