{"version":3,"sources":["components/Switch.js","components/Shades.js","App.js","serviceWorker.js","index.js"],"names":["Switch","react_default","a","createElement","className","type","onClick","this","props","toggle","React","Component","Container","styled","div","_templateObject","left","Box","_templateObject2","bg","Shades","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","copyToClipboard","e","el","document","rgb","convertToRGB","target","dataset","layer","value","copyHex","rgb2hex","setAttribute","style","position","body","appendChild","select","execCommand","removeChild","_rgb$slice$split$map","slice","split","map","i","parseInt","toString","padStart","_rgb$slice$split$map2","slicedToArray","r","g","b","concat","source","convertToRGBAObj","rgba","console","log","Math","round","_rgba$slice$split","_rgba$slice$split2","bind","assertThisInitialized","data-layer","Wrapper","section","App_templateObject","Input","input","App_templateObject2","darkMode","HexInput","RGBAInput","Button","button","_templateObject3","App","handleButtonClick","setState","prevState","showShades","handleHexChange","checkValidHex","hex2rgba","checkDarkMode","hex","test","_hex$match","match","_hex$match2","rr","gg","bb","aa","alpha","toFixed","handleRGBAChange","checkValidRGBA","rgba2hex","_rgba$slice$split3","_rgba$slice$split4","inRange","n","upperLimit","_rgba$slice$split5","_rgba$slice$split6","parseFloat","_rgba$slice$split$map","_rgba$slice$split$map2","_rgba$slice$split7","_rgba$slice$split8","toggleCopyMode","isHexCopied","state","src_components_Switch","components_Shades","onChange","maxLength","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81e958c7.chunk.js","sourcesContent":["import React from 'react';\n// import styled from 'styled-components';\nimport './Switch.css';\n\nclass Switch extends React.Component {\n\n  render() {\n    return (\n      <label className=\"switch\">\n        <input type=\"checkbox\" onClick={this.props.toggle}/>\n        <span className=\"slider round\"></span>\n      </label>\n    )\n  }\n    \n}\n\nexport default Switch;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: transparent;\n  height: 100vh;\n  width: 10%;\n  position: absolute;\n  left: ${props => props.left}\n  top: 0;\n`;\n\nconst Box = styled.div`\n  background: ${props => props.bg};\n  width: 100%;\n  height: 20%;\n  z-index: 999;\n`;\n\nclass Shades extends React.Component {\n  constructor(props) {\n    super(props)\n    this.copyToClipboard = this.copyToClipboard.bind(this)\n  }\n  \n  copyToClipboard = (e) => {\n    const el = document.createElement('textarea');\n    const rgb = this.convertToRGB(e.target.dataset.layer)\n    el.value = this.props.copyHex ? this.rgb2hex(rgb) : rgb;\n    el.setAttribute('readonly', '');\n    el.style = {position: 'absolute', left: '-9999px'};\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n\n  rgb2hex = (rgb) => {\n    const [r, g, b] = rgb.slice(4,-1).split(',')\n                          .map(i => parseInt(i).toString(16).padStart(2, '0'))\n    return `#${r}${g}${b}`                      \n  }\n  \n  convertToRGB = (layer) => {\n    const source = this.convertToRGBAObj(layer)\n    const bg = this.convertToRGBAObj(this.props.rgba)\n    console.log('source', source)\n    console.log('bg', bg)\n    const r = Math.round(((1-source.a) * bg.r) + (source.a * source.r))\n    const g = Math.round(((1-source.a) * bg.g) + (source.a * source.g))\n    const b = Math.round(((1-source.a) * bg.b) + (source.a * source.b))\n    return `rgb(${r}, ${g}, ${b})`\n  }\n  \n  convertToRGBAObj = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    return {r:r, g:g, b:b, a:a}\n  }\n\n  render() {\n    return(\n      <div>\n        <Container left={0}>\n          \n          <Box bg={'rgba(255,255,255,0.1)'} data-layer={'rgba(255,255,255,0.1)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(255,255,255,0.2)'} data-layer={'rgba(255,255,255,0.2)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(255,255,255,0.3)'} data-layer={'rgba(255,255,255,0.3)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(255,255,255,0.4)'} data-layer={'rgba(255,255,255,0.4)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(255,255,255,0.5)'} data-layer={'rgba(255,255,255,0.5)'} onClick={this.copyToClipboard}></Box>\n        </Container>\n        <Container left={'90%'}>\n          <Box bg={'rgba(0,0,0,0.1)'} data-layer={'rgba(0,0,0,0.1)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(0,0,0,0.2)'} data-layer={'rgba(0,0,0,0.2)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(0,0,0,0.3)'} data-layer={'rgba(0,0,0,0.3)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(0,0,0,0.4)'} data-layer={'rgba(0,0,0,0.4)'} onClick={this.copyToClipboard}></Box>\n          <Box bg={'rgba(0,0,0,0.5)'} data-layer={'rgba(0,0,0,0.5)'} onClick={this.copyToClipboard}></Box>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Shades;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Switch from './components/Switch';\nimport Shades from './components/Shades';\n\nconst Wrapper = styled.section`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  // padding: 4em;\n  background: ${props => props.bg}\n`;\n\nconst Input = styled.input`\n  background-color: transparent;\n  color: ${props => props.darkMode ? \"white\" : \"black\"};\n  border-style: none;\n  border-bottom: ${props => props.darkMode ? \"white\" : \"black\"} solid 1px;\n  font-size: 20px;\n  text-align: center;\n  padding: 5px 20px;\n  margin: 10px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst HexInput = Input \nconst RGBAInput = Input\n\nconst Button = styled.button`\n  font-size: large;\n  background: transparent;\n  color: ${props => props.darkMode ? \"white\" : \"black\"};\n  padding: 10px;\n  border: 1px solid ${props => props.darkMode ? \"white\" : \"black\"};\n  border-radius: 5px;\n  position: absolute;\n  top: 5%;\n  &:hover {\n    background: ${props => props.darkMode ? \"white\" : \"black\"};\n    color: ${props => props.darkMode ? \"black\" : \"white\"};\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hex: '#ff00ffff',\n      rgba: 'rgba(255,0,255,1.0)',\n      bg: '#ff00ffff',\n      showShades: true,\n      darkMode: false,\n      isHexCopied: true\n    }\n    this.handleButtonClick = this.handleButtonClick.bind(this)\n    this.handleHexChange = this.handleHexChange.bind(this)\n    this.handleRGBAChange = this.handleRGBAChange.bind(this)\n    \n  }\n\n  handleButtonClick = (e) => {\n    this.setState(prevState => ({\n      showShades: !prevState.showShades\n    }))\n  }\n\n  handleHexChange = (e) => {\n    if (this.checkValidHex(e.target.value)) {\n      const rgba = this.hex2rgba(e.target.value)\n      this.setState({\n        bg: e.target.value,\n        rgba: rgba,\n        darkMode: this.checkDarkMode(rgba)\n      })\n    }     \n    this.setState({ hex: e.target.value })\n  }\n\n  checkValidHex = (hex) => {\n    const regex = /^#[a-fA-F0-9]{6}$/\n    const regex2 = /^#[a-fA-F0-9]{8}$/\n    return regex.test(hex) || regex2.test(hex)\n  }\n\n  hex2rgba = (hex) => {\n    const [rr, gg, bb, aa] = hex.match(/\\w\\w/g)\n    const r = parseInt(rr, 16)\n    const g = parseInt(gg, 16)\n    const b = parseInt(bb, 16)\n    const alpha = aa ? (parseInt(aa, 16) / 255).toFixed(2) : 1.0\n    return `rgba(${r},${g},${b},${alpha})`\n  }\n\n  handleRGBAChange = (e) => {\n    console.log(e.target.value)\n    console.log(this.checkValidRGBA(e.target.value))\n    if (this.checkValidRGBA(e.target.value)) {\n      this.setState({\n        bg: e.target.value,\n        hex: this.rgba2hex(e.target.value),\n        darkMode: this.checkDarkMode(e.target.value)\n      })\n    }\n    this.setState({ rgba: e.target.value })\n  }\n\n  checkValidRGBA = (rgba) => {\n    let r = 0; \n    let g = 0; \n    let b = 0;\n    let a = 0;\n    if (rgba.slice(0,4) === \"rgba\") {\n      const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    } else {\n      const [r, g, b] = rgba.slice(4,-1).split(',')\n      a = 1\n    }\n    return (\n      this.inRange(r, 255) && \n      this.inRange(g, 255) && \n      this.inRange(b, 255) &&\n      this.inRange(a, 1)\n    )\n  }\n\n  inRange = (n, upperLimit) => {\n    return parseInt(n) >= 0 && parseInt(n) <= upperLimit\n  }\n\n  rgba2hex = (rgba) => {\n    if (rgba.slice(0,4) === \"rgba\") {\n      const [r, g, b, a] = rgba.slice(5,-1).split(',')\n      const rr = parseInt(r).toString(16).padStart(2, '0')\n      const gg = parseInt(g).toString(16).padStart(2, '0')\n      const bb = parseInt(b).toString(16).padStart(2, '0')\n      const aa = Math.round((parseFloat(a) * 255)).toString(16).padStart(2, '0')\n      return `#${rr}${gg}${bb}${aa}`\n    } else {\n        const [r, g, b] = rgba.slice(4,-1).split(',')\n                              .map(i => parseInt(i).toString(16).padStart(2, '0'))\n        return `#${r}${g}${b}`                      \n    }\n  }\n\n  checkDarkMode = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    const val = parseInt(r) * 299 + parseInt(g) * 587 + parseInt(b) * 114 / 1000\n    return val < 123 ? true : false\n  }\n\n  toggleCopyMode = (e) => {\n    this.setState(prevState => ({\n      isHexCopied: !prevState.isHexCopied\n    }), ()=>{console.log(this.state.isHexCopied)})\n    \n  }\n\n  render() {\n    return (\n      <Wrapper bg={this.state.bg}>\n        <Button\n          onClick={this.handleButtonClick}\n          darkMode={this.state.darkMode}\n        >Show Shades</Button>\n\n        <Switch toggle={this.toggleCopyMode}></Switch>\n\n        { this.state.showShades ? (\n          <Shades rgba={this.state.rgba} copyHex={this.state.isHexCopied}/>\n        ) : (<div></div>)}\n\n        <HexInput \n          type=\"text\" \n          onChange={this.handleHexChange}\n          value={this.state.hex}\n          maxLength={9}\n          darkMode={this.state.darkMode}\n        />\n        <RGBAInput \n          type=\"text\"\n          onChange={this.handleRGBAChange}\n          value={this.state.rgba}\n          darkMode={this.state.darkMode}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}