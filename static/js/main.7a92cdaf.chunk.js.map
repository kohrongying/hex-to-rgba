{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","section","_templateObject","props","bg","Input","input","_templateObject2","darkMode","Button","button","_templateObject3","Container","div","_templateObject4","left","Box","_templateObject5","HexInput","RGBAInput","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleButtonClick","e","setState","prevState","showShades","handleHexChange","console","log","target","value","checkValidHex","rgba","hex2rgba","checkDarkMode","hex","test","_hex$match","match","_hex$match2","slicedToArray","rr","gg","bb","aa","r","parseInt","g","b","alpha","toFixed","concat","handleRGBAChange","checkValidRGBA","rgba2hex","_rgba$slice$split","slice","split","_rgba$slice$split2","a","inRange","n","upperLimit","_rgba$slice$split3","_rgba$slice$split4","toString","padStart","Math","round","parseFloat","_rgba$slice$split5","_rgba$slice$split6","state","bind","assertThisInitialized","react_default","createElement","onClick","type","onChange","maxLength","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a92cdaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.section`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  // padding: 4em;\n  background: ${props => props.bg}\n`;\n\nconst Input = styled.input`\n  background-color: transparent;\n  color: ${props => props.darkMode ? \"white\" : \"black\"};\n  border-style: none;\n  border-bottom: ${props => props.darkMode ? \"white\" : \"black\"} solid 1px;\n  font-size: 20px;\n  text-align: center;\n  padding: 5px 20px;\n  margin: 10px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Button = styled.button`\n  font-size: large;\n  background: transparent;\n  color: ${props => props.darkMode ? \"white\" : \"black\"};\n  padding: 10px;\n  border: 1px solid ${props => props.darkMode ? \"white\" : \"black\"};\n  border-radius: 5px;\n  position: absolute;\n  top: 5%;\n  &:hover {\n    background: ${props => props.darkMode ? \"white\" : \"black\"};\n    color: ${props => props.darkMode ? \"black\" : \"white\"};\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Container = styled.div`\n  background-color: transparent;\n  height: 100vh;\n  width: 10%;\n  position: absolute;\n  left: ${props => props.left}\n  top: 0;\n`;\n\nconst Box = styled.div`\n  background: ${props => props.bg};\n  width: 100%;\n  height: 20%;\n`;\nconst HexInput = Input \nconst RGBAInput = Input\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hex: '#ff00ffff',\n      rgba: 'rgba(255,0,255,1.0)',\n      bg: '#ff00ffff',\n      showShades: false,\n      darkMode: false,\n    }\n    this.handleButtonClick = this.handleButtonClick.bind(this)\n    this.handleHexChange = this.handleHexChange.bind(this)\n    this.handleRGBAChange = this.handleRGBAChange.bind(this)\n  }\n\n  handleButtonClick = (e) => {\n    this.setState(prevState => ({\n      showShades: !prevState.showShades\n    }))\n  }\n\n  handleHexChange = (e) => {\n    console.log(e.target.value)\n    console.log(this.checkValidHex(e.target.value))\n    if (this.checkValidHex(e.target.value)) {\n      const rgba = this.hex2rgba(e.target.value)\n      this.setState({\n        bg: e.target.value,\n        rgba: rgba,\n        darkMode: this.checkDarkMode(rgba)\n      })\n    }     \n    this.setState({\n      hex: e.target.value\n    })\n  }\n\n  checkValidHex = (hex) => {\n    const regex = /^#[a-fA-F0-9]{6}$/\n    const regex2 = /^#[a-fA-F0-9]{8}$/\n    return regex.test(hex) || regex2.test(hex)\n  }\n\n  hex2rgba = (hex) => {\n    const [rr, gg, bb, aa] = hex.match(/\\w\\w/g)\n    const r = parseInt(rr, 16)\n    const g = parseInt(gg, 16)\n    const b = parseInt(bb, 16)\n    const alpha = aa ? (parseInt(aa, 16) / 255).toFixed(2) : 1.0\n    return `rgba(${r},${g},${b},${alpha})`\n  }\n\n  handleRGBAChange = (e) => {\n    if (this.checkValidRGBA(e.target.value)) {\n      this.setState({\n        bg: e.target.value,\n        hex: this.rgba2hex(e.target.value),\n        darkMode: this.checkDarkMode(e.target.value)\n      })\n    }\n    this.setState({\n      rgba: e.target.value,\n    })\n    \n  }\n\n  checkValidRGBA = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    return (\n      this.inRange(r, 255) && \n      this.inRange(g, 255) && \n      this.inRange(b, 255) &&\n      this.inRange(a, 1)\n    )\n  }\n\n  inRange = (n, upperLimit) => {\n    return parseInt(n) >= 0 && parseInt(n) <= upperLimit\n  }\n\n  rgba2hex = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    const rr = parseInt(r).toString(16).padStart(2, '0')\n    const gg = parseInt(g).toString(16).padStart(2, '0')\n    const bb = parseInt(b).toString(16).padStart(2, '0')\n    const aa = Math.round((parseFloat(a) * 255)).toString(16).padStart(2, '0')\n    return `#${rr}${gg}${bb}${aa}`\n  }\n\n  checkDarkMode = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    const val = parseInt(r) * 299 + parseInt(g) * 587 + parseInt(b) * 114 / 1000\n    return val < 123 ? true : false\n  }\n\n  render() {\n    return (\n      <Wrapper bg={this.state.bg}>\n        <Button\n          onClick={this.handleButtonClick}\n          darkMode={this.state.darkMode}\n        >Show Shades</Button>\n\n        { this.state.showShades ? (\n          <div>\n          <Container left={0}>\n            <Box bg={'rgba(255,255,255,0.1)'}></Box>\n            <Box bg={'rgba(255,255,255,0.2)'}></Box>\n            <Box bg={'rgba(255,255,255,0.3)'}></Box>\n            <Box bg={'rgba(255,255,255,0.4)'}></Box>\n            <Box bg={'rgba(255,255,255,0.5)'}></Box>\n          </Container>\n          <Container left={'90%'}>\n            <Box bg={'rgba(0,0,0,0.1)'}></Box>\n            <Box bg={'rgba(0,0,0,0.2)'}></Box>\n            <Box bg={'rgba(0,0,0,0.3)'}></Box>\n            <Box bg={'rgba(0,0,0,0.4)'}></Box>\n            <Box bg={'rgba(0,0,0,0.5)'}></Box>\n          </Container>\n          </div>\n        ) : (\n          <div></div> \n        )\n          \n        }\n        <HexInput \n          type=\"text\" \n          onChange={this.handleHexChange}\n          value={this.state.hex}\n          maxLength={9}\n          darkMode={this.state.darkMode}\n        />\n        <RGBAInput \n          type=\"text\"\n          onChange={this.handleRGBAChange}\n          value={this.state.rgba}\n          darkMode={this.state.darkMode}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}