{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","section","_templateObject","props","bg","Input","input","_templateObject2","HexInput","RGBAInput","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHexChange","e","checkValidHex","target","value","setState","rgba","hex2rgba","hex","test","_hex$match","match","_hex$match2","slicedToArray","rr","gg","bb","aa","r","parseInt","g","b","alpha","toFixed","concat","handleRGBAChange","checkValidRGBA","rgba2hex","_rgba$slice$split","slice","split","_rgba$slice$split2","a","inRange","n","upperLimit","_rgba$slice$split3","_rgba$slice$split4","toString","padStart","Math","round","parseFloat","state","bind","assertThisInitialized","react_default","createElement","type","onChange","maxLength","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d234ebf9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.section`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  // padding: 4em;\n  background: ${props => props.bg}\n\n`;\n\nconst Input = styled.input`\n  background-color: transparent;\n  border-style: none;\n  border-bottom: black solid 1px;\n  font-size: 20px;\n  text-align: center;\n  padding: 5px 10px;\n  margin: 10px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst HexInput = Input \nconst RGBAInput = Input\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hex: '#ff00ffff',\n      rgba: 'rgba(255,0,255,1)',\n      bg: '#ff00ffff'\n    }\n    this.handleHexChange = this.handleHexChange.bind(this)\n    this.handleRGBAChange = this.handleRGBAChange.bind(this)\n  }\n\n  handleHexChange = (e) => {\n    if (this.checkValidHex(e.target.value)) {\n      this.setState({\n        bg: e.target.value,\n        rgba: this.hex2rgba(e.target.value)\n      })\n    }     \n    this.setState({\n      hex: e.target.value\n    })\n  }\n\n  checkValidHex = (hex) => {\n    const regex = /^#[a-f0-9]{6}$/\n    const regex2 = /^#[a-f0-9]{8}$/\n    return regex.test(hex) || regex2.test(hex)\n  }\n\n  hex2rgba = (hex) => {\n    const [rr, gg, bb, aa] = hex.match(/\\w\\w/g)\n    const r = parseInt(rr, 16)\n    const g = parseInt(gg, 16)\n    const b = parseInt(bb, 16)\n    const alpha = aa ? (parseInt(aa, 16) / 255).toFixed(2) : 1.0\n    return `rgba(${r},${g},${b},${alpha})`\n  }\n\n  handleRGBAChange = (e) => {\n    if (this.checkValidRGBA(e.target.value)) {\n      this.setState({\n        bg: e.target.value,\n        hex: this.rgba2hex(e.target.value)\n      })\n    }\n    this.setState({\n      rgba: e.target.value,\n    })\n    \n  }\n\n  checkValidRGBA = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    return (\n      this.inRange(r, 255) && \n      this.inRange(g, 255) && \n      this.inRange(b, 255) &&\n      this.inRange(a, 1)\n    )\n  }\n\n  inRange = (n, upperLimit) => {\n    return parseInt(n) >= 0 && parseInt(n) <= upperLimit\n  }\n\n  rgba2hex = (rgba) => {\n    const [r, g, b, a] = rgba.slice(5,-1).split(',')\n    const rr = parseInt(r).toString(16).padStart(2, '0')\n    const gg = parseInt(g).toString(16).padStart(2, '0')\n    const bb = parseInt(b).toString(16).padStart(2, '0')\n    const aa = Math.round((parseFloat(a) * 255)).toString(16).padStart(2, '0')\n    return `#${rr}${gg}${bb}${aa}`\n  }\n\n  render() {\n    return (\n      <Wrapper bg={this.state.bg}>\n        <HexInput \n          type=\"text\" \n          onChange={this.handleHexChange}\n          value={this.state.hex}\n          maxLength={9} />\n        <RGBAInput \n          type=\"text\"\n          onChange={this.handleRGBAChange}\n          value={this.state.rgba}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}